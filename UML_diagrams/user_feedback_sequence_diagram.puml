@startuml
actor LI
participant FE
participant BE
participant DB as "DB(SQL)"
participant AGENT
participant MCP

LI <- FE: gives feedback on draft, presses button
FE -> BE: POST /process-feedback/ (user id, draft message_id, feedback)
BE --> FE: 202 ACCEPTED
BE -> DB: get agent_id from draft message (by message_id)
BE -> AGENT: process feedback (input = all messages of thread_name) ordered by timestamp, feedback: string)
loop 
    alt toolcall suggest_draft
        AGENT -> BE: suggest_draft (input = draft content: string)
        BE -> DB: get all messages of thread_name, ordered by timestamp
        BE -> BE: check if new message in it compared to list of messages used by agent
        alt new message found
            BE -> DB: don't store draft
        else no new message found
            BE -> DB: add agent to agents table (key = agent_id - randomly generated, value = messages json)
            BE -> DB: add draft message to DB (link agent_id)
        end
    else toolcall find_similar_messages
        AGENT -> BE: find_similar_messages (input = message_content: string)
        BE -> MCP: find similar messages (input = message_content: string, user_id: string)
        MCP --> BE: similar messages (array of strings)
        BE --> AGENT: similar messages (array of strings)
    else toolcall semantic_search
        AGENT -> BE: semantic_search (input = search_query: string)
        BE -> MCP: semantic search (input = search_query: string, user_id: string)
        MCP --> BE: similar messages (array of strings)
        BE --> AGENT: similar messages (array of strings)
    end
end
@enduml
